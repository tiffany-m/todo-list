// original project before converting to webpack

const toDoProjectContainer = document.getElementById("to-do-project-container");
const addNewProjectBtn = document.getElementById("add-new-project-btn");
const clearBtn = document.getElementById("clear-btn");
const submitBtn = document.getElementById("submit-btn");
const closeModalBtn = document.getElementById("close-btn");
const form = {
    title: document.getElementById("title"),
    description: document.getElementById("description"),
    dueDate: document.getElementById("due-date"),
    priority: document.getElementById("priority")
}
const priorityBtn = {
    yellow: document.getElementById('low-priority-btn'),
    orange: document.getElementById('medium-priority-btn'),
    red: document.getElementById('high-priority-btn')
}
let selectedPriority = "";
let index;
const indexFromStorage = localStorage.getItem("index");

// Initialize localStorageProjects from local storage if data exists.
// This prevents data loss when the page is refreshed.
let localStorageProjects = JSON.parse(localStorage.getItem("myProjects"));

// defaults to prevent errors
if (localStorageProjects == null) localStorageProjects = [];
if (indexFromStorage && !isNaN(indexFromStorage)) {
  index = JSON.parse(indexFromStorage);
} else {
  index = 0;
}

function ToDoProject(title, description, dueDate, priority, index) {
  this.title = title;
  this.description = description;
  this.dueDate = dueDate;
  this.priority = priority;
  this.index = index;
}

function findValueSelectedRadioBtn() {
    if(priorityBtn.yellow.checked) {     
          selectedPriority = priorityBtn.yellow.value; 
            return selectedPriority;
    } else if (priorityBtn.orange.checked) {     
          selectedPriority = priorityBtn.orange.value;
            return selectedPriority;
    } else {
        selectedPriority = "HIGH";
        return selectedPriority;
    }
}

function clearModal() {
    form.title.value = "";
    form.description.value = "";
    form.dueDate.value = "";
    
    let radioBtn = document.querySelector('input[name="priority-btn"]:checked');
    if (radioBtn) radioBtn.checked = false;
}

function addNewProjectToDisplay(project) {
    let projectElement = document.createElement("div");
    projectElement.insertAdjacentHTML('beforeend', `
        <div>${project.title}</div>
        <div>${project.description}</div>
        <div>${project.dueDate}</div>
        <span class="priority-color-project">${project.priority}</span>
        <button class="edit-btn btn">Edit</button>
        <button class="delete-btn btn">Delete</button>`);

    // change priority element to proper color for new project
    let priorityColorElement = projectElement.querySelector(".priority-color-project");

    if(project.priority === "LOW") { 
        priorityColorElement.className += " yellow-color";
    } else if (project.priority === "MEDIUM") {
        priorityColorElement.className += " orange-color";
    } else {
        priorityColorElement.className += " red-color";
    }

    toDoProjectContainer.appendChild(projectElement);
}

addNewProjectBtn.addEventListener("click", () => {
    modal.showModal();
})

clearBtn.addEventListener("click", () => {
    localStorage.clear(); 
    location.reload();
})

closeModalBtn.addEventListener("click", (e) => {
    e.preventDefault(); // prevents modal (dialog element in HTML) from clearing projects when clicked
    modal.close();
})

// new project added to display and local storage
submitBtn.addEventListener("click", (e) => {
    e.preventDefault();  // prevents form from trying to submit
    modal.close();
    
    index++;
    localStorage.setItem("index", JSON.stringify(index));
    index = parseInt(localStorage.getItem("index"), 10);
    console.log(`index added: ${index}`)

    findValueSelectedRadioBtn();

    let newProject = new ToDoProject(form.title.value, form.description.value, form.dueDate.value, selectedPriority, index);
    localStorageProjects.push(newProject);
    addNewProjectToDisplay(newProject);
    
    localStorage.setItem("myProjects", JSON.stringify(localStorageProjects));
    clearModal();
});

// loads projects saved to local storage when page is refreshed
function loadProjects() {
    let projects = JSON.parse(localStorage.getItem("myProjects"));

    if (projects == null || projects.length == 0) return;

    for(let i = 0; i < projects.length; i++) {
        // . notation because projects array is full of objects
        selectedPriority = projects[i].priority;
        addNewProjectToDisplay(projects[i]);
    }

    return;
}

window.onload = loadProjects;

// NOTES
// localStorage.setItem('key', JSON.stringify(data)); -> Convert it to String before saving to LocalStorage
// data = JSON.parse(localStorage.getItem('key')); -> Convert back to JS object, reading from LocalStorage

// first line saves current local storage before writing over
// let localStorageLists= JSON.parse(localStorage.getItem("key"));
// if(localStorageLists == null) localStorageLists = [];

// NOTES
// localStorage.setItem('key', JSON.stringify(data)); -> Convert it to String before saving to LocalStorage
// data = JSON.parse(localStorage.getItem('key')); -> Convert back to JS object, reading from LocalStorage

// first line saves current local storage before writing over
// let localStorageLists= JSON.parse(localStorage.getItem("key"));
// if(localStorageLists == null) localStorageLists = [];